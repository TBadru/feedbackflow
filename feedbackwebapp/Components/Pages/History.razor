@page "/history"
@inject FeedbackWebApp.Services.ISharedHistoryServiceProvider SharedHistoryServiceProvider
@inject FeedbackWebApp.Services.Interfaces.IHistoryService HistoryService
@inject FeedbackWebApp.Services.Authentication.IAuthenticationService AuthService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject FeedbackWebApp.Services.IToastService ToastService
@inject FeedbackWebApp.Services.IHistoryHelper HistoryHelper
@inject FeedbackWebApp.Services.UserSettingsService UserSettings
@using SharedDump.Models
@using Markdig
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using FeedbackWebApp.Services.Interfaces
@using SharedDump.Utils
@using FeedbackWebApp.Utils
@using FeedbackWebApp.Services
@using FeedbackWebApp.Components.Shared

@namespace FeedbackWebApp.Components.Pages

<PageTitle>Saved Analysis</PageTitle>

<ConfirmationDialog 
    IsVisible="@isConfirmationDialogVisible"
    Title="@confirmationDialogTitle"
    Message="@confirmationDialogMessage"
    ConfirmText="@confirmationDialogConfirmText"
    ConfirmButtonClass="@confirmationDialogButtonClass"
    OnConfirm="@HandleConfirmationDialogConfirm"
    OnCancel="@HandleConfirmationDialogCancel" />

<CopyFailedDialog 
    IsVisible="@showCopyFailedDialog"
    Content="@failedCopyContent"
    ContentType="@failedCopyContentType"
    OnClose="@CloseCopyFailedDialog" />

<!-- Processing Dialog -->
<div class="modal fade @(isUpdatingVisibility ? "show d-block" : "")" tabindex="-1" style="z-index: 1055;">
    <div class="modal-backdrop fade show" style="z-index: 1050;"></div>
    <div class="modal-dialog modal-dialog-centered" style="z-index: 1060;">
        <div class="modal-content">
            <div class="modal-body text-center py-4">
                <div class="spinner-border text-primary mb-3" role="status" style="width: 2rem; height: 2rem;">
                    <span class="visually-hidden">Processing...</span>
                </div>
                <p class="mb-0">Updating visibility settings...</p>
            </div>
        </div>
    </div>
</div>

<div class="container-lg py-4 history-page">


    @if (!isAuthenticated)
    {
        <div class="card shadow-sm">
            <div class="card-body">
                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                <span>Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="feedbackflow-title mb-0">Saved Analysis</h1>
        </div>
        @if (historyItems is { Count: > 0 })
        {
            <div class="filter-section card bg-body mb-4 p-3 shadow-sm">
                <div class="row g-3">
                    <div class="col-12 mb-2">
                        <label for="searchFilter" class="form-label">Search Analysis Content</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" class="form-control" id="searchFilter" placeholder="Search through analysis content..." 
                                   @bind="searchTerm" @bind:event="oninput" @bind:after="HandleSearchChangeAsync" />
                            @if (!string.IsNullOrWhiteSpace(searchTerm))
                            {
                                <button class="btn btn-outline-secondary action-btn" type="button" @onclick="ClearSearch">
                                    <i class="bi bi-x-circle"></i>
                                </button>
                            }
                        </div>
                    </div>
                    <div class="col-md-6">
                        <label for="dateFilter" class="form-label">Date Range</label>
                        <select class="form-select" id="dateFilter" @bind="dateFilter" @bind:after="StateHasChanged">
                            <option value="all">All Time</option>
                            <option value="today">Today</option>
                            <option value="week">Last 7 Days</option>
                            <option value="month">Last 30 Days</option>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label for="sourceFilter" class="form-label">Service Type</label>
                        <select class="form-select" id="sourceFilter" @bind="sourceFilter" @bind:after="StateHasChanged">
                            <option value="all">All Services</option>
                            <option value="YouTube">YouTube</option>
                            <option value="GitHub">GitHub</option>
                            <option value="Reddit">Reddit</option>
                            <option value="Twitter">Twitter</option>
                            <option value="HackerNews">HackerNews</option>
                            <option value="DevBlogs">DevBlogs</option>
                            <option value="Manual">Manual</option>
                        </select>
                    </div>
                </div>
            </div>
        }

        @if (historyItems is null)
        {
            <div class="loading-state card bg-body shadow-sm">
                <div class="card-body text-center py-4">
                    <div class="spinner-border text-primary mb-3" role="status" style="width: 2rem; height: 2rem;">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mb-2">Loading your shared analysis history...</p>
                    <small class="text-muted">This will only take a moment</small>
                </div>
            </div>
        }
        else if (!historyItems.Any())
        {
            <div class="empty-state card bg-body shadow-sm">
                <div class="card-body text-center">
                    <i class="bi bi-cloud-upload display-4 mb-3"></i>
                    <p class="mb-2">No shared analysis history found.</p>
                    <small class="text-muted empty-state-hint d-block">Share your first analysis to see it appear here!</small>
                </div>
            </div>
        }    
        else if (filteredItems is { Count: > 0 })
        {
            <div class="mb-3">
                <small class="text-muted">
                    Showing @filteredItems.Count of @totalItems shared items
                    @if (!string.IsNullOrWhiteSpace(searchTerm))
                    {
                        <span> (filtered by search)</span>
                    }
                </small>
            </div>
            
            <div class="list-group">
                @foreach (var item in filteredItems)
                {
                    <div class="list-group-item shared-item" @key="item.Id">
                        <!-- Header with metadata -->
                        <div class="item-header d-flex justify-content-between align-items-start mb-2">
                            <div class="item-meta d-flex align-items-center gap-2 flex-wrap">
                                @{
                                    var sourceTypes = item.SourceType.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
                                    foreach (var sourceType in sourceTypes)
                                    {
                                        <i class="bi @HistoryHelper.GetServiceIcon(sourceType) service-icon"></i>
                                    }
                                    <span class="source-badge">@item.SourceType</span>
                                }
                                <small class="text-muted">@item.Timestamp.ToLocalTime().ToString("g")</small>
                                <span class="badge visibility-badge @(item.IsPublic ? "visibility-public" : "visibility-private")">
                                    <i class="bi @(item.IsPublic ? "bi-globe" : "bi-lock") me-1"></i>
                                    @(item.IsPublic ? "Public" : "Private")
                                </span>
                            </div>
                        </div>
                        
                        <!-- Action buttons on secondary line -->
                        <div class="analysis-actions d-flex flex-wrap align-items-center justify-content-end gap-2 mb-3">
                            @if (item.IsPublic)
                            {
                                <button class="btn btn-sm btn-outline-success action-btn" 
                                        title="Copy Share Link"
                                        @onclick="() => HistoryHelper.CopyShareLink(item, NavigationManager.BaseUri, JSRuntime, ToastService, ShowCopyFailedDialog)">
                                    <i class="bi bi-link-45deg me-1"></i>Copy Link
                                </button>
                            }
                            <button class="btn btn-sm @(item.IsPublic ? "btn-outline-secondary" : "btn-outline-info") action-btn" 
                                    title="@(item.IsPublic ? "Make Private" : "Make Public")"
                                    disabled="@isUpdatingVisibility"
                                    @onclick="() => ToggleVisibility(item.Id, !item.IsPublic)">
                                <i class="bi @(item.IsPublic ? "bi-lock" : "bi-globe") me-1"></i>
                                @(item.IsPublic ? "Make Private" : "Make Public")
                            </button>
                            <button class="btn btn-sm btn-outline-danger action-btn" 
                                    title="Delete" 
                                    @onclick="() => ConfirmDelete(item.Id)">
                                <i class="bi bi-trash me-1"></i>Delete
                            </button>
                        </div>
                                              
                        @if (!string.IsNullOrWhiteSpace(item.UserInput) && item.SourceType != "Manual")
                        {
                            <div class="user-input mb-3">
                                @{
                                    var urls = item.UserInput.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
                                    if (urls.All(url => UrlParsing.IsValidUrl(url)))
                                    {
                                        <div class="url-links">
                                            @foreach (var url in urls)
                                            {
                                                <div class="url-link-item">
                                                    <i class="bi bi-link-45deg text-primary me-1"></i>
                                                    <a href="@url" target="_blank" rel="noopener noreferrer" class="url-link">@url</a>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="manual-input">
                                            <i class="bi bi-chat-text text-primary me-1"></i>
                                            <span>@item.UserInput</span>
                                        </div>
                                    }
                                }
                            </div>
                        }

                        <div class="analysis-content clickable-analysis" @onclick="() => NavigateToAnalysis(item.Id)">
                            <div class="analysis-summary">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="analysis-label">Analysis</span>
                                    <span class="view-full-indicator">
                                        <span class="me-1">View Full</span>
                                        <i class="bi bi-arrow-right"></i>
                                    </span>
                                </div>
                                <div class="markdown-content">
                                    @((MarkupString)HistoryHelper.ConvertMarkdownToHtml(item.Summary))
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

        @* Local Archive Link - Only show if user has local history items *@
        @if (hasLocalHistoryItems)
        {
            <div class="local-archive-section mt-5 pt-4 border-top">
                <div class="card bg-body shadow-sm">
                    <div class="card-body text-center">
                        <i class="bi bi-archive display-6 mb-3 text-muted"></i>
                        <h5 class="card-title">Local Analysis Archive</h5>
                        <p class="card-text text-muted">
                            You have older analyses stored locally on this device. These will eventually be migrated to shared storage.
                        </p>
                        <a href="/history-local" class="btn btn-outline-primary">
                            <i class="bi bi-folder-open me-2"></i>
                            View Local Archive
                        </a>
                    </div>
                </div>
            </div>
        }

        @* Discreet survey link for users with shared history *@
        <SurveyLink IsVisible="@showSurveyLink" OnSurveyClicked="@OnSurveyLinkClicked" />
    }


</div>


@code {
    private ISharedHistoryService? sharedHistoryService;
    private List<AnalysisHistoryItem>? historyItems;
    private List<AnalysisHistoryItem>? filteredItems => FilterHistoryItems();
    private string dateFilter = "all";
    private string sourceFilter = "all";
    private string searchTerm = string.Empty;
    private bool isAuthenticated = false;
    private bool hasLocalHistoryItems = false;
    private bool isLoadingData = false;
    
    // Pagination state
    private int totalItems = 0;

    // Confirmation dialog state
    private bool isConfirmationDialogVisible;
    private string confirmationDialogTitle = "";
    private string confirmationDialogMessage = "";
    private string confirmationDialogConfirmText = "";
    private string confirmationDialogButtonClass = "";
    private Func<Task>? onConfirmAction;    
    
    // Copy failed dialog state
    private bool showCopyFailedDialog = false;
    private string failedCopyContent = string.Empty;
    private string failedCopyContentType = string.Empty;

    // Visibility management state
    private bool isUpdatingVisibility = false;

    // Survey link state
    private bool showSurveyLink = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = await AuthService.IsAuthenticatedAsync();
            
            if (!isAuthenticated)
            {
                // Redirect to home page for login
                NavigationManager.NavigateTo("/");
                return;
            }
            
            sharedHistoryService = SharedHistoryServiceProvider.GetService();
            
            // Check if user has local history items
            await CheckForLocalHistoryItems();
            
            if (isAuthenticated && !isLoadingData)
            {
                await LoadSharedHistoryAsync();
            }
            
            StateHasChanged();
        }
    }
    
    private void HandleAuthenticated(bool success)
    {
        isAuthenticated = success;
        if (success && !isLoadingData)
        {
            // Load shared history when successfully authenticated
            _ = InvokeAsync(async () =>
            {
                await LoadSharedHistoryAsync();
                StateHasChanged();
            });
        }
        StateHasChanged();
    }
    
    private async Task CheckForLocalHistoryItems()
    {
        try
        {
            var localItems = await HistoryService.GetHistoryAsync();
            hasLocalHistoryItems = localItems.Any();
        }
        catch
        {
            hasLocalHistoryItems = false;
        }
    }

    private async Task LoadSharedHistoryAsync()
    {
        if (sharedHistoryService == null || isLoadingData) return;
        
        isLoadingData = true;
        
        try
        {
            var sharedItems = await sharedHistoryService.GetUsersSavedAnalysesAsync();
            
            // Convert SharedAnalysisEntity to AnalysisHistoryItem
            var newHistoryItems = new List<AnalysisHistoryItem>();
            
            foreach (var sharedItem in sharedItems)
            {
                // Get full analysis data to construct proper AnalysisHistoryItem
                var analysisData = await sharedHistoryService.GetSharedAnalysisDataAsync(sharedItem.Id);
                
                var historyItem = new AnalysisHistoryItem
                {
                    Id = sharedItem.Id,
                    Timestamp = sharedItem.CreatedDate,
                    FullAnalysis = analysisData?.FullAnalysis ?? sharedItem.Summary,

                    SourceType = sharedItem.SourceType,
                    UserInput = sharedItem.UserInput,
                    IsShared = true,
                    SharedId = sharedItem.Id,
                    SharedDate = sharedItem.CreatedDate,
                    IsPublic = sharedItem.IsPublic
                };
                
                newHistoryItems.Add(historyItem);
            }
            
            // Remove duplicates by Id and sort by most recent first
            historyItems = newHistoryItems
                .GroupBy(h => h.Id)
                .Select(g => g.First())
                .OrderByDescending(h => h.Timestamp)
                .ToList();
            totalItems = historyItems.Count;
            
            // Show survey link if user has shared history and hasn't completed survey
            await CheckAndShowSurveyLinkAsync();
        }
        catch (Exception)
        {
            // Fallback to empty list if something goes wrong
            historyItems = new List<AnalysisHistoryItem>();
            totalItems = 0;
        }
        finally
        {
            isLoadingData = false;
        }
    }

    private async Task DeleteItem(string id)
    {
        if (sharedHistoryService == null) return;
        
        try
        {
            var success = await sharedHistoryService.DeleteSharedAnalysisAsync(id);
            if (success)
            {
                // Remove item from current list and update totals
                if (historyItems != null)
                {
                    historyItems.RemoveAll(item => item.Id == id);
                    totalItems = Math.Max(0, totalItems - 1);
                }
                
                await ToastService.ShowSuccessAsync("Shared analysis deleted successfully.");
            }
            else
            {
                await ToastService.ShowErrorAsync("Failed to delete shared analysis.");
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync($"Error deleting analysis: {ex.Message}");
        }
        
        StateHasChanged();
    }

    private void NavigateToAnalysis(string analysisId)
    {
        NavigationManager.NavigateTo($"/analysis/{analysisId}");
    }
    
    private List<AnalysisHistoryItem> FilterHistoryItems()
    {
        if (historyItems == null)
            return new List<AnalysisHistoryItem>();

        var items = historyItems.AsEnumerable();

        // Apply source filter
        if (sourceFilter != "all")
        {
            items = items.Where(x => x.SourceType.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                            .Any(s => s.Equals(sourceFilter, StringComparison.OrdinalIgnoreCase)));
        }

        // Apply date filter
        var now = DateTime.Now;
        items = dateFilter switch
        {
            "today" => items.Where(x => x.Timestamp.Date == now.Date),
            "week" => items.Where(x => (now - x.Timestamp).TotalDays <= 7),
            "month" => items.Where(x => (now - x.Timestamp).TotalDays <= 30),
            _ => items // "all" or any other value
        };

        // Apply search term filter if not empty
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.Trim().ToLowerInvariant();
            items = items.Where(x => 
                (x.Summary != null && x.Summary.ToLowerInvariant().Contains(term)) || 
                (x.FullAnalysis != null && x.FullAnalysis.ToLowerInvariant().Contains(term)) ||
                (x.UserInput != null && x.UserInput.ToLowerInvariant().Contains(term)));
        }

        return items.ToList();
    }

    private Task HandleSearchChangeAsync()
    {
        // No need to call backend - filtering is handled locally by FilterHistoryItems()
        // Just trigger a state change to update the UI
        StateHasChanged();
        
        return Task.CompletedTask;
    }

    private Task ClearSearch()
    {
        searchTerm = string.Empty;
        
        // No need to reload from backend - local filtering will handle this
        StateHasChanged();
        
        return Task.CompletedTask;
    }
    
    private Task ConfirmDelete(string id)
    {
        return ShowConfirmationDialog(
            "Delete Shared Analysis",
            "Are you sure you want to delete this shared analysis? This action cannot be undone and will remove the analysis from shared storage.",
            "Delete",
            "btn-danger",
            () => DeleteItem(id));
    }

    private Task ShowConfirmationDialog(string title, string message, string confirmText, string buttonClass, Func<Task> onConfirm)
    {
        confirmationDialogTitle = title;
        confirmationDialogMessage = message;
        confirmationDialogConfirmText = confirmText;
        confirmationDialogButtonClass = buttonClass;
        onConfirmAction = onConfirm;
        isConfirmationDialogVisible = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void HandleConfirmationDialogCancel()
    {
        isConfirmationDialogVisible = false;
        onConfirmAction = null;
        StateHasChanged();
    }

    private async Task HandleConfirmationDialogConfirm()
    {
        isConfirmationDialogVisible = false;
        StateHasChanged();
        
        if (onConfirmAction != null)
        {
            await onConfirmAction();
        }
        onConfirmAction = null;
    }    
    
    private void ShowCopyFailedDialog(string content, string contentType)
    {
        failedCopyContent = content;
        failedCopyContentType = contentType;
        showCopyFailedDialog = true;
        StateHasChanged();
    }

    private void CloseCopyFailedDialog()
    {
        showCopyFailedDialog = false;
        failedCopyContent = string.Empty;
        failedCopyContentType = string.Empty;
        StateHasChanged();
    }

    private async Task ToggleVisibility(string itemId, bool isPublic)
    {
        // Direct action - no confirmation dialog needed
        await UpdateAnalysisVisibility(itemId, isPublic);
    }

    private async Task UpdateAnalysisVisibility(string itemId, bool isPublic)
    {
        if (sharedHistoryService == null) return;

        isUpdatingVisibility = true;
        StateHasChanged();

        try
        {
            await sharedHistoryService.UpdateAnalysisVisibilityAsync(itemId, isPublic);
            
            // Update the local item
            var item = historyItems?.FirstOrDefault(h => h.Id == itemId);
            if (item != null)
            {
                item.IsPublic = isPublic;
                StateHasChanged();
            }

            var visibilityText = isPublic ? "public" : "private";
            await ToastService.ShowSuccessAsync($"Analysis has been made {visibilityText}");
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync($"Failed to update analysis visibility: {ex.Message}");
        }
        finally
        {
            isUpdatingVisibility = false;
            StateHasChanged();
        }
    }

    private async Task CheckAndShowSurveyLinkAsync()
    {
        try
        {
            // Show survey link if survey enabled, user has shared history items and hasn't completed current survey
            if (UserSettings.IsSurveyEnabled() && historyItems != null && historyItems.Count > 0)
            {
                var hasCompletedSurvey = await UserSettings.HasCompletedSurveyAsync();
                if (!hasCompletedSurvey)
                {
                    showSurveyLink = true;
                }
            }
        }
        catch { /* ignore */ }
    }

    private Task OnSurveyLinkClicked()
    {
        // Hide the survey link in the parent component
        showSurveyLink = false;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
